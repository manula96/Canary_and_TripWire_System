package alertSystem;

import javax.mail.*;
import javax.mail.internet.*;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Properties;

public class EmailAlert {

    // Use Mailtrap's SMTP server details from the image
    private static final String SMTP_SERVER = "live.smtp.mailtrap.io";  // Mailtrap's SMTP host
    private static final int SMTP_PORT = 587;  // Use the recommended port 587
    private static final String USERNAME = "api";  // Use the username from your Mailtrap credentials
    private static final String PASSWORD = "c2ec7ebe315faa79b580aad871eb47e2";  // Insert your password from the image
    private static final String EMAIL_FROM = "hello@demomailtrap.com";  // Your test sender email
    private static final String EMAIL_TO = "ai.expert21815@gmail.com";  // Your test recipient email

    public static void main(String[] args) {
        // Simulate file path and action
        String filePath = "C:/example/folder/file.txt";
        String action = "modified";

        // Send email alert
        sendEmailAlert(filePath, action);
    }

    public static void sendEmailAlert(String filePath, String action) {
        Properties props = new Properties();
        props.put("mail.smtp.auth", "true");  // Enable SMTP authentication
        props.put("mail.smtp.starttls.enable", "true");  // Enable STARTTLS
        props.put("mail.smtp.host", SMTP_SERVER);  // Mailtrap SMTP server
        props.put("mail.smtp.port", String.valueOf(SMTP_PORT));  // Mailtrap port
        props.put("mail.smtp.ssl.trust", SMTP_SERVER);  // Trust Mailtrap's SSL certificate

        // Create a session with an authenticator
        Session session = Session.getInstance(props, new Authenticator() {
            @Override
            protected PasswordAuthentication getPasswordAuthentication() {
                return new PasswordAuthentication(USERNAME, PASSWORD);  // Mailtrap credentials
            }
        });

        try {
            // Get the current timestamp
            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            String timestamp = dateFormat.format(new Date());

            // Capitalize the action for better presentation
            String capitalizedAction = action.substring(0, 1).toUpperCase() + action.substring(1);

            // Create the subject
            String subject = "Canary Alert | File " + capitalizedAction;

            // Create the email message
            MimeMessage message = new MimeMessage(session);
            message.setFrom(new InternetAddress(EMAIL_FROM));  // Set sender's address
            message.addRecipient(Message.RecipientType.TO, new InternetAddress(EMAIL_TO));  // Set recipient's address
            message.setSubject(subject);

            // Create a nicely formatted email body
            String emailBody = "<html>" +
                    "<body>" +
                    "<h2>Canary Alert Notification</h2>" +
                    "<p>A file-related event occurred on the monitored system. Please find the details below:</p>" +
                    "<table border='1' cellpadding='10' cellspacing='0'>" +
                    "<tr><th>Action</th><td>" + capitalizedAction + "</td></tr>" +
                    "<tr><th>File Path</th><td>" + filePath + "</td></tr>" +
                    "<tr><th>Timestamp</th><td>" + timestamp + "</td></tr>" +
                    "</table>" +
                    "<br>" +
                    "<p><i>This is an automated message generated by the Canary monitoring system.</i></p>" +
                    "</body>" +
                    "</html>";

            // Set the email content and specify it as HTML
            message.setContent(emailBody, "text/html");

            // Send the email
            Transport.send(message);
            System.out.println("Email sent successfully.");

        } catch (MessagingException e) {
            System.err.println("Error occurred while sending email: " + e.getMessage());
            e.printStackTrace();
        }
    }
}
